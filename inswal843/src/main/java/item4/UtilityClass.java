package item4;

public class UtilityClass {

//    단순히 정적 메서드와 정적 필드만을 담은 클래스를 만들고 싶을 때가 있다.
//    객체 지향적으로 사고하지 않는 이들이 종종 남용하는 방식이기에 곱게 보이지는 않지만 나름의 쓰임새가 있다.
//    ex)
//        java.lang.Math, java.util.Arrays 처럼 기본 타입이나 배열 관련 메서드들을 모아 놓을 수 있다.
//        java.util.Collections 처럼 특정 인터페이스를 구현하는 객체를 생성해주는 정적 메서드를 모아 놓을 수 있다.
//        final 클래스와 관련한 메서드들을 모아 놓을 때도 사용한다.
//
//    하지만 생성자를 만들지 않으면 public 기본 생성자를 만들어 주고
//    추상 클래스로 만들어도 상속받은 하위 클래스를 만들어서 인스턴스화 할 수 있다.
//    따라서 private 생성자를 추가하면 클래스의 인스턴스화를 막을 수 있다.
    private UtilityClass() {
        throw new AssertionError(); // 클래스 안에서도 호출이 되면 예외가 반환되도록 안전하게 설정
    }
//    생성자를 private로 선언해서 하위 클래스가 상위 클래스의 생성자에 접근할 길이 막혀서
//    상속을 불가능 하게 하는 추가적인 효과도 있다.
}
